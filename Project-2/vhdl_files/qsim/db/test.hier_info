|lsm_block
SM => lsm_logic_block:lsm_block1.SM
LM => lsm_logic_block:lsm_block1.LM
clk => dregister:ir8_reg.clk
clk => counter:counter1.clk
lm_sm_stall => lsm_logic_block:lsm_block1.lm_sm_stall
flush_bit_pipe1 => lsm_logic_block:lsm_block1.flush_bit_pipe1
ir8_IF[0] => mux_2to1_nbits:mux_1.input0[0]
ir8_IF[1] => mux_2to1_nbits:mux_1.input0[1]
ir8_IF[2] => mux_2to1_nbits:mux_1.input0[2]
ir8_IF[3] => mux_2to1_nbits:mux_1.input0[3]
ir8_IF[4] => mux_2to1_nbits:mux_1.input0[4]
ir8_IF[5] => mux_2to1_nbits:mux_1.input0[5]
ir8_IF[6] => mux_2to1_nbits:mux_1.input0[6]
ir8_IF[7] => mux_2to1_nbits:mux_1.input0[7]
lm_sm_halt << lsm_logic_block:lsm_block1.lm_sm_halt
lm_sm_nop << lsm_logic_block:lsm_block1.lm_sm_nop
lm_sm_start << lsm_logic_block:lsm_block1.lm_sm_start
LM_address[0] << PriorityEncoder:pe.output[0]
LM_address[1] << PriorityEncoder:pe.output[1]
LM_address[2] << PriorityEncoder:pe.output[2]
SM_address[0] << PriorityEncoder:pe.output[0]
SM_address[1] << PriorityEncoder:pe.output[1]
SM_address[2] << PriorityEncoder:pe.output[2]
op2[0] << mux_2to1_nbits:mux2.output[0]
op2[1] << mux_2to1_nbits:mux2.output[1]
op2[2] << mux_2to1_nbits:mux2.output[2]
op2[3] << mux_2to1_nbits:mux2.output[3]
op2[4] << mux_2to1_nbits:mux2.output[4]
op2[5] << mux_2to1_nbits:mux2.output[5]
op2[6] << mux_2to1_nbits:mux2.output[6]
op2[7] << mux_2to1_nbits:mux2.output[7]
op2[8] << mux_2to1_nbits:mux2.output[8]
op2[9] << mux_2to1_nbits:mux2.output[9]
op2[10] << mux_2to1_nbits:mux2.output[10]
op2[11] << mux_2to1_nbits:mux2.output[11]
op2[12] << mux_2to1_nbits:mux2.output[12]
op2[13] << mux_2to1_nbits:mux2.output[13]
op2[14] << mux_2to1_nbits:mux2.output[14]
op2[15] << mux_2to1_nbits:mux2.output[15]


|lsm_block|mux_2to1_nbits:mux_1
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
input0[0] => output.IN1
input0[1] => output.IN1
input0[2] => output.IN1
input0[3] => output.IN1
input0[4] => output.IN1
input0[5] => output.IN1
input0[6] => output.IN1
input0[7] => output.IN1
input1[0] => output.IN1
input1[1] => output.IN1
input1[2] => output.IN1
input1[3] => output.IN1
input1[4] => output.IN1
input1[5] => output.IN1
input1[6] => output.IN1
input1[7] => output.IN1
output[0] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[1] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[2] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[3] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[4] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[5] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[6] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[7] <= output.DB_MAX_OUTPUT_PORT_TYPE


|lsm_block|dregister:ir8_reg
reset => dout[0]~reg0.ACLR
reset => dout[1]~reg0.ACLR
reset => dout[2]~reg0.ACLR
reset => dout[3]~reg0.ACLR
reset => dout[4]~reg0.ACLR
reset => dout[5]~reg0.ACLR
reset => dout[6]~reg0.ACLR
reset => dout[7]~reg0.ACLR
din[0] => dout[0]~reg0.DATAIN
din[1] => dout[1]~reg0.DATAIN
din[2] => dout[2]~reg0.DATAIN
din[3] => dout[3]~reg0.DATAIN
din[4] => dout[4]~reg0.DATAIN
din[5] => dout[5]~reg0.DATAIN
din[6] => dout[6]~reg0.DATAIN
din[7] => dout[7]~reg0.DATAIN
dout[0] <= dout[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[1] <= dout[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[2] <= dout[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[3] <= dout[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[4] <= dout[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[5] <= dout[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[6] <= dout[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[7] <= dout[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
enable => dout[7]~reg0.ENA
enable => dout[6]~reg0.ENA
enable => dout[5]~reg0.ENA
enable => dout[4]~reg0.ENA
enable => dout[3]~reg0.ENA
enable => dout[2]~reg0.ENA
enable => dout[1]~reg0.ENA
enable => dout[0]~reg0.ENA
clk => dout[0]~reg0.CLK
clk => dout[1]~reg0.CLK
clk => dout[2]~reg0.CLK
clk => dout[3]~reg0.CLK
clk => dout[4]~reg0.CLK
clk => dout[5]~reg0.CLK
clk => dout[6]~reg0.CLK
clk => dout[7]~reg0.CLK


|lsm_block|counter:counter1
clk => temp[0].CLK
clk => temp[1].CLK
clk => temp[2].CLK
reset => temp.OUTPUTSELECT
reset => temp.OUTPUTSELECT
reset => temp.OUTPUTSELECT
reset => process_1.IN1
enable => temp.OUTPUTSELECT
enable => temp.OUTPUTSELECT
enable => temp.OUTPUTSELECT
overflow <= process_1.DB_MAX_OUTPUT_PORT_TYPE
A[0] <= temp[0].DB_MAX_OUTPUT_PORT_TYPE
A[1] <= temp[1].DB_MAX_OUTPUT_PORT_TYPE
A[2] <= temp[2].DB_MAX_OUTPUT_PORT_TYPE


|lsm_block|PriorityEncoder:pe
input[0] => invalid.IN1
input[0] => y.IN1
input[0] => y.IN0
input[0] => y.IN1
input[1] => invalid.IN1
input[1] => y.IN1
input[1] => y.IN1
input[1] => y.IN1
input[2] => invalid.IN1
input[2] => y.IN1
input[2] => y.IN0
input[2] => y.IN0
input[3] => invalid.IN1
input[3] => y.IN1
input[3] => y.IN0
input[3] => y.IN1
input[4] => invalid.IN1
input[4] => y.IN0
input[4] => y.IN0
input[4] => y.IN1
input[5] => invalid.IN1
input[5] => y.IN1
input[5] => y.IN1
input[5] => y.IN1
input[5] => y.IN1
input[6] => invalid.IN0
input[6] => y.IN1
input[6] => y.IN0
input[7] => invalid.IN1
input[7] => y[0].IN1
input[7] => y.IN1
output[0] <= y[0].DB_MAX_OUTPUT_PORT_TYPE
output[1] <= y[1].DB_MAX_OUTPUT_PORT_TYPE
output[2] <= y[2].DB_MAX_OUTPUT_PORT_TYPE
invalid <= invalid.DB_MAX_OUTPUT_PORT_TYPE


|lsm_block|mux_2to1_nbits:mux2
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
input0[0] => output.IN1
input0[1] => output.IN1
input0[2] => output.IN1
input0[3] => output.IN1
input0[4] => output.IN1
input0[5] => output.IN1
input0[6] => output.IN1
input0[7] => output.IN1
input0[8] => output.IN1
input0[9] => output.IN1
input0[10] => output.IN1
input0[11] => output.IN1
input0[12] => output.IN1
input0[13] => output.IN1
input0[14] => output.IN1
input0[15] => output.IN1
input1[0] => output.IN1
input1[1] => output.IN1
input1[2] => output.IN1
input1[3] => output.IN1
input1[4] => output.IN1
input1[5] => output.IN1
input1[6] => output.IN1
input1[7] => output.IN1
input1[8] => output.IN1
input1[9] => output.IN1
input1[10] => output.IN1
input1[11] => output.IN1
input1[12] => output.IN1
input1[13] => output.IN1
input1[14] => output.IN1
input1[15] => output.IN1
output[0] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[1] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[2] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[3] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[4] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[5] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[6] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[7] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[8] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[9] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[10] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[11] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[12] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[13] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[14] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[15] <= output.DB_MAX_OUTPUT_PORT_TYPE


|lsm_block|lsm_logic_block:lsm_block1
SM => process_0.IN0
LM => process_0.IN1
ir8_out[0] => ir8_in_sig.DATAA
ir8_out[1] => ir8_in_sig.DATAA
ir8_out[2] => ir8_in_sig.DATAA
ir8_out[3] => ir8_in_sig.DATAA
ir8_out[4] => ir8_in_sig.DATAA
ir8_out[5] => ir8_in_sig.DATAA
ir8_out[6] => ir8_in_sig.DATAA
ir8_out[7] => ir8_in_sig.DATAA
lm_sm_stall => lm_sm_halt.OUTPUTSELECT
lm_sm_stall => lm_sm_nop.OUTPUTSELECT
lm_sm_stall => en_counter.IN1
lm_sm_stall => en_ir8.DATAA
lm_sm_stall => mux_ir8.IN1
lm_sm_stall => lm_sm_start.IN1
lm_sm_stall => en_counter$latch.DATAIN
flush_bit_pipe1 => lm_sm_halt.OUTPUTSELECT
flush_bit_pipe1 => lm_sm_nop.OUTPUTSELECT
flush_bit_pipe1 => rst_counter.OUTPUTSELECT
flush_bit_pipe1 => lm_sm_start$latch.ACLR
flush_bit_pipe1 => en_ir8$latch.LATCH_ENABLE
flush_bit_pipe1 => mux_ir8.IN1
flush_bit_pipe1 => ir8_in[7].IN1
flush_bit_pipe1 => en_counter.IN1
en_ir8 <= en_ir8$latch.DB_MAX_OUTPUT_PORT_TYPE
mux_ir8 <= mux_ir8$latch.DB_MAX_OUTPUT_PORT_TYPE
lm_sm_halt <= lm_sm_halt.DB_MAX_OUTPUT_PORT_TYPE
lm_sm_nop <= lm_sm_nop.DB_MAX_OUTPUT_PORT_TYPE
lm_sm_start <= lm_sm_start$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[0] <= ir8_in[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[1] <= ir8_in[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[2] <= ir8_in[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[3] <= ir8_in[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[4] <= ir8_in[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[5] <= ir8_in[5]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[6] <= ir8_in[6]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[7] <= ir8_in[7]$latch.DB_MAX_OUTPUT_PORT_TYPE
counter_in[0] => Equal0.IN2
counter_in[1] => Equal0.IN1
counter_in[2] => Equal0.IN0
rst_counter <= rst_counter.DB_MAX_OUTPUT_PORT_TYPE
en_counter <= en_counter$latch.DB_MAX_OUTPUT_PORT_TYPE
pe_done => process_0.IN1
pe_out[0] => Decoder0.IN2
pe_out[1] => Decoder0.IN1
pe_out[2] => Decoder0.IN0



|LM_SM_Block
reset => LM_SM_logic:lsm_block.reset
clk => dregister:ir8_reg.clk
clk => LM_SM_logic:lsm_block.clk
op_code[0] => LM_SM_logic:lsm_block.op_code[0]
op_code[1] => LM_SM_logic:lsm_block.op_code[1]
op_code[2] => LM_SM_logic:lsm_block.op_code[2]
op_code[3] => LM_SM_logic:lsm_block.op_code[3]
imm_ir_8[0] => mux_2to1_nbits:mux1.input0[0]
imm_ir_8[1] => mux_2to1_nbits:mux1.input0[1]
imm_ir_8[2] => mux_2to1_nbits:mux1.input0[2]
imm_ir_8[3] => mux_2to1_nbits:mux1.input0[3]
imm_ir_8[4] => mux_2to1_nbits:mux1.input0[4]
imm_ir_8[5] => mux_2to1_nbits:mux1.input0[5]
imm_ir_8[6] => mux_2to1_nbits:mux1.input0[6]
imm_ir_8[7] => mux_2to1_nbits:mux1.input0[7]
LM_address[0] << LM_SM_logic:lsm_block.LM_address[0]
LM_address[1] << LM_SM_logic:lsm_block.LM_address[1]
LM_address[2] << LM_SM_logic:lsm_block.LM_address[2]
SM_address[0] << LM_SM_logic:lsm_block.SM_address[0]
SM_address[1] << LM_SM_logic:lsm_block.SM_address[1]
SM_address[2] << LM_SM_logic:lsm_block.SM_address[2]
op2[0] << LM_SM_logic:lsm_block.op2[0]
op2[1] << LM_SM_logic:lsm_block.op2[1]
op2[2] << LM_SM_logic:lsm_block.op2[2]
op2[3] << LM_SM_logic:lsm_block.op2[3]
op2[4] << LM_SM_logic:lsm_block.op2[4]
op2[5] << LM_SM_logic:lsm_block.op2[5]
op2[6] << LM_SM_logic:lsm_block.op2[6]
op2[7] << LM_SM_logic:lsm_block.op2[7]
op2[8] << LM_SM_logic:lsm_block.op2[8]
op2[9] << LM_SM_logic:lsm_block.op2[9]
op2[10] << LM_SM_logic:lsm_block.op2[10]
op2[11] << LM_SM_logic:lsm_block.op2[11]
op2[12] << LM_SM_logic:lsm_block.op2[12]
op2[13] << LM_SM_logic:lsm_block.op2[13]
op2[14] << LM_SM_logic:lsm_block.op2[14]
op2[15] << LM_SM_logic:lsm_block.op2[15]
en_IFID << LM_SM_logic:lsm_block.en_IFID
en_PC << LM_SM_logic:lsm_block.en_PC


|LM_SM_Block|mux_2to1_nbits:mux1
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
s0 => output.IN0
input0[0] => output.IN1
input0[1] => output.IN1
input0[2] => output.IN1
input0[3] => output.IN1
input0[4] => output.IN1
input0[5] => output.IN1
input0[6] => output.IN1
input0[7] => output.IN1
input1[0] => output.IN1
input1[1] => output.IN1
input1[2] => output.IN1
input1[3] => output.IN1
input1[4] => output.IN1
input1[5] => output.IN1
input1[6] => output.IN1
input1[7] => output.IN1
output[0] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[1] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[2] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[3] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[4] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[5] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[6] <= output.DB_MAX_OUTPUT_PORT_TYPE
output[7] <= output.DB_MAX_OUTPUT_PORT_TYPE


|LM_SM_Block|dregister:ir8_reg
reset => dout[0]~reg0.ACLR
reset => dout[1]~reg0.ACLR
reset => dout[2]~reg0.ACLR
reset => dout[3]~reg0.ACLR
reset => dout[4]~reg0.ACLR
reset => dout[5]~reg0.ACLR
reset => dout[6]~reg0.ACLR
reset => dout[7]~reg0.ACLR
din[0] => dout[0]~reg0.DATAIN
din[1] => dout[1]~reg0.DATAIN
din[2] => dout[2]~reg0.DATAIN
din[3] => dout[3]~reg0.DATAIN
din[4] => dout[4]~reg0.DATAIN
din[5] => dout[5]~reg0.DATAIN
din[6] => dout[6]~reg0.DATAIN
din[7] => dout[7]~reg0.DATAIN
dout[0] <= dout[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[1] <= dout[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[2] <= dout[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[3] <= dout[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[4] <= dout[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[5] <= dout[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[6] <= dout[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[7] <= dout[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
enable => dout[7]~reg0.ENA
enable => dout[6]~reg0.ENA
enable => dout[5]~reg0.ENA
enable => dout[4]~reg0.ENA
enable => dout[3]~reg0.ENA
enable => dout[2]~reg0.ENA
enable => dout[1]~reg0.ENA
enable => dout[0]~reg0.ENA
clk => dout[0]~reg0.CLK
clk => dout[1]~reg0.CLK
clk => dout[2]~reg0.CLK
clk => dout[3]~reg0.CLK
clk => dout[4]~reg0.CLK
clk => dout[5]~reg0.CLK
clk => dout[6]~reg0.CLK
clk => dout[7]~reg0.CLK


|LM_SM_Block|LM_SM_logic:lsm_block
reset => en_IFID.OUTPUTSELECT
reset => mux_select.IN1
reset => mux_select.OUTPUTSELECT
reset => ir8_in[7].IN1
reset => ir8_in[6].IN1
reset => ir8_in[5].IN1
reset => ir8_in[4].IN1
reset => ir8_in[3].IN1
reset => ir8_in[2].IN1
reset => ir8_in[1].IN1
reset => ir8_in[0].IN1
reset => LM_address[2].IN1
reset => SM_address[2].IN1
reset => op2[2].IN1
reset => start.IN1
reset => \lm_sm_process:counter[0].IN1
clk => ~NO_FANOUT~
op_code[0] => Equal0.IN3
op_code[0] => Equal1.IN2
op_code[1] => Equal0.IN1
op_code[1] => Equal1.IN1
op_code[2] => Equal0.IN0
op_code[2] => Equal1.IN0
op_code[3] => Equal0.IN2
op_code[3] => Equal1.IN3
ir8_out[0] => PriorityEncoder:pe.input[0]
ir8_out[0] => ir8_in[0].DATAA
ir8_out[0] => ir8_in[0].DATAA
ir8_out[1] => PriorityEncoder:pe.input[1]
ir8_out[1] => ir8_in[1].DATAA
ir8_out[1] => ir8_in[1].DATAA
ir8_out[2] => PriorityEncoder:pe.input[2]
ir8_out[2] => ir8_in[2].DATAA
ir8_out[2] => ir8_in[2].DATAA
ir8_out[3] => PriorityEncoder:pe.input[3]
ir8_out[3] => ir8_in[3].DATAA
ir8_out[3] => ir8_in[3].DATAA
ir8_out[4] => PriorityEncoder:pe.input[4]
ir8_out[4] => ir8_in[4].DATAA
ir8_out[4] => ir8_in[4].DATAA
ir8_out[5] => PriorityEncoder:pe.input[5]
ir8_out[5] => ir8_in[5].DATAA
ir8_out[5] => ir8_in[5].DATAA
ir8_out[6] => PriorityEncoder:pe.input[6]
ir8_out[6] => ir8_in[6].DATAA
ir8_out[6] => ir8_in[6].DATAA
ir8_out[7] => PriorityEncoder:pe.input[7]
ir8_out[7] => ir8_in[7].DATAA
ir8_out[7] => ir8_in[7].DATAA
ir8_in[0] <= ir8_in[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[1] <= ir8_in[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[2] <= ir8_in[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[3] <= ir8_in[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[4] <= ir8_in[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[5] <= ir8_in[5]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[6] <= ir8_in[6]$latch.DB_MAX_OUTPUT_PORT_TYPE
ir8_in[7] <= ir8_in[7]$latch.DB_MAX_OUTPUT_PORT_TYPE
LM_address[0] <= LM_address[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
LM_address[1] <= LM_address[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
LM_address[2] <= LM_address[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
SM_address[0] <= SM_address[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
SM_address[1] <= SM_address[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
SM_address[2] <= SM_address[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
mux_select <= mux_select$latch.DB_MAX_OUTPUT_PORT_TYPE
op2[0] <= op2[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
op2[1] <= op2[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
op2[2] <= op2[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
op2[3] <= <GND>
op2[4] <= <GND>
op2[5] <= <GND>
op2[6] <= <GND>
op2[7] <= <GND>
op2[8] <= <GND>
op2[9] <= <GND>
op2[10] <= <GND>
op2[11] <= <GND>
op2[12] <= <GND>
op2[13] <= <GND>
op2[14] <= <GND>
op2[15] <= <GND>
en_IFID <= en_IFID$latch.DB_MAX_OUTPUT_PORT_TYPE
en_PC <= en_PC$latch.DB_MAX_OUTPUT_PORT_TYPE


|LM_SM_Block|LM_SM_logic:lsm_block|PriorityEncoder:pe
input[0] => invalid.IN1
input[0] => y.IN1
input[0] => y.IN0
input[0] => y.IN1
input[1] => invalid.IN1
input[1] => y.IN1
input[1] => y.IN1
input[1] => y.IN1
input[2] => invalid.IN1
input[2] => y.IN1
input[2] => y.IN0
input[2] => y.IN0
input[3] => invalid.IN1
input[3] => y.IN1
input[3] => y.IN0
input[3] => y.IN1
input[4] => invalid.IN1
input[4] => y.IN0
input[4] => y.IN0
input[4] => y.IN1
input[5] => invalid.IN1
input[5] => y.IN1
input[5] => y.IN1
input[5] => y.IN1
input[5] => y.IN1
input[6] => invalid.IN0
input[6] => y.IN1
input[6] => y.IN0
input[7] => invalid.IN1
input[7] => y[0].IN1
input[7] => y.IN1
output[0] <= y[0].DB_MAX_OUTPUT_PORT_TYPE
output[1] <= y[1].DB_MAX_OUTPUT_PORT_TYPE
output[2] <= y[2].DB_MAX_OUTPUT_PORT_TYPE
invalid <= invalid.DB_MAX_OUTPUT_PORT_TYPE


